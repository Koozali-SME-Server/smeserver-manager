package SrvMngr::Controller::Emailsettings;
#
# Generated by SM2Gen version:0.9(20Jan2025) Chameleon version:4.5.4 On Python:3.12.3 at 2025-06-29 08:53:20 
# Remember that each route must be unique (else they just overwrite each other).
# you cannot have get and post on the same name and url.
#
#----------------------------------------------------------------------
# heading     : System
# description : E-Mail
# navigation  : 4000 400
#
# name : emailsettings,    method : get,   url : /emailsettings,   ctlact : Emailsettings#main
# name : emailsettingsu,   method : post,  url : /emailsettingsu,  ctlact : Emailsettings#do_update
# name : emailsettingsd,   method : get,   url : /emailsettingsd,  ctlact : Emailsettings#do_display
#
# routes : end
#
# Documentation: https://wiki.contribs.org/Emailsettings
#----------------------------------------------------------------------

#
# Scheme of things:
#
# TBA!!

use strict;
use warnings;
use Mojo::Base 'Mojolicious::Controller';

use constant FALSE => 0;
use constant TRUE  => 1;

use Locale::gettext;
use SrvMngr::I18N;
use SrvMngr qw(theme_list init_session);

use Data::Dumper;

use esmith::util;
use esmith::util::network;
use esmith::ConfigDB::UTF8;
use esmith::AccountsDB;
use esmith::NetworksDB::UTF8;
use esmith::HostsDB;
use esmith::DomainsDB::UTF8;

my $cdb;
my $adb;
my $ndb; 
my $hdb; 
my $ddb; 

my %mai_data;

require '/usr/share/smanager/lib/SrvMngr/Controller/Emailsettings-Custom.pm';  #The code that is to be added by the developer

sub main {
#
# Initial entry - route is "/<whatever>"
#
#set initial panel
#for initial panel:
	#Specifiy panel to enter
	#load up _data hash with DB fields
	#load up stash with pointer(s) to control fields hash(= get-))
		#and a pointer to the prefix_data hash
#render initial panel

    my $c = shift;
    $c->app->log->info( $c->log_req );

	#The most common ones - you might want to delete some of these if they are not used.
	 $cdb = esmith::ConfigDB::UTF8->open()   || die("Couldn't open config db");
	 $adb = esmith::AccountsDB->open() || die("Couldn't open Accounts db");
	 $ndb = esmith::NetworksDB->open() || die("Couldn't open Network db");
	 $hdb = esmith::HostsDB::UTF8->open() 	  || die("Couldn't open Hosts db");
	 $ddb = esmith::DomainsDB::UTF8->open()  || die("Couldn't open Domains db");

     %mai_data = ();
    my $title = $c->l('mai_E-Mail');
    my $modul = '';

    $mai_data{'trt'} = 'FRONT';
    
    #Load any DB entries into the <prefix>_data area so as they are preset in the form
    # which DB - this only really works if the initial panel is a PARAMS type panel and not a TABLE
    my $db = $cdb; #pickup local or global db or Default to config
    
	
	$c->do_display($mai_data{'trt'});
	
}

# Post request with params - submit from the form 
sub do_update {
#
# Return after submit pushed on panel (this is a post) - route is "/<whatever>u"
# parameters in the params hash.
#
#load up all params into prefix_data hash:
#By panel (series of if statements - only one executed):
		#call validate-PANEL() - return ret = ok or error message
			
#if validation not ok:
	#render back to current panel with error message in stash
#otherwise:
	#By panel (series of if statements - only one executed):
		#do whatever is required: call perform-PANEL() - return 'ok' or Error Message
			#call signal-event for any global actions specified (check it exists - error and continue?)
			#if action smeserver-<whatever>-update exists
				#signal_event smeserver-<whatever>-update
			#call signal-event for any specific actions for thids panel (check it exists first - error and continue)
		#set success in stash
		#if no "nextpanel" entry:
			#set firstpanel
		#else 
			#set nextpanel
		#call render
	
    my $c = shift;
    $c->app->log->info($c->log_req);
	my $modul = '';

	#The most common ones - you might want to delete some of these if they are not used.
	 $cdb = esmith::ConfigDB::UTF8->open()   || die("Couldn't open config db");
	 $adb = esmith::AccountsDB->open() || die("Couldn't open Accounts db");
	 $ndb = esmith::NetworksDB->open() || die("Couldn't open Network db");
	 $hdb = esmith::HostsDB::UTF8->open() 	  || die("Couldn't open Hosts db");
	 $ddb = esmith::DomainsDB::UTF8->open()  || die("Couldn't open Domains db");

    my $title = $c->l('mai_E-Mail');

	# Accessing all POST/GET parameters
    my $params = $c->req->params->to_hash;

    # Get number of POST parameters
    #my $num_params = keys scaler %$params;
    
    #Params are available in the hash "params" - copy to the prefix_data hash
    #while (my ($key, $value) = each %{$c->req->params->to_hash}) {
    #    $mai_data{$key} = $value;
    #}

    # the value of trt will tell you which panel has returned    
    my $trt = $c->param('trt') || 'FRONT'; #hidden control on every form.
    my $ret = 'ok';

    #Validate the parameters in a custom sub one for each panel (although only one of these will be executed)
    my $thispanel;
    
		if ($trt eq 'FRONT'){
			#Validate form parameters for panel FRONT
			$ret = $c->validate_FRONT(\%mai_data);
			$thispanel = 'FRONT';
		}
	
		if ($trt eq 'ACC'){
			#Validate form parameters for panel ACC
			$ret = $c->validate_ACC(\%mai_data);
			$thispanel = 'ACC';
		}
	
		if ($trt eq 'FIL'){
			#Validate form parameters for panel FIL
			$ret = $c->validate_FIL(\%mai_data);
			$thispanel = 'FIL';
		}
	
		if ($trt eq 'REC'){
			#Validate form parameters for panel REC
			$ret = $c->validate_REC(\%mai_data);
			$thispanel = 'REC';
		}
	
		if ($trt eq 'DEL'){
			#Validate form parameters for panel DEL
			$ret = $c->validate_DEL(\%mai_data);
			$thispanel = 'DEL';
		}
	
	if ($ret ne 'ok'){
		$c->stash(error => $c->l($ret));
		$c->do_display($thispanel);
	} else {
		#Do whatever is needed, including writing values to the DB
		if ($trt eq 'FRONT'){
			#do whatever is required ...
			$ret = $c->perform_FRONT(\%mai_data);
			if ($ret ne 'ok') {
				# return to the panel with error message
				$c->stash(error => $c->l($ret));
				$c->stash( 
					title => $title, 
					modul => $modul,
					mai_data  => \%mai_data
				);
				$c->render(template => "emailsettings");	
				return
			} else {
				$c->stash( success => $c->l('mai_FRONT_panel_action_was_successful')); #A bit bland - edit it in the lex file
			}
		}
	
		if ($trt eq 'ACC'){
			#do whatever is required ...
			$ret = $c->perform_ACC(\%mai_data);
			if ($ret ne 'ok') {
				# return to the panel with error message
				$c->stash(error => $c->l($ret));
				$c->stash( 
					title => $title, 
					modul => $modul,
					mai_data  => \%mai_data
				);
				$c->render(template => "emailsettings");	
				return
			} else {
				$c->stash( success => $c->l('mai_ACC_panel_action_was_successful')); #A bit bland - edit it in the lex file
			}
		}
	
		if ($trt eq 'FIL'){
			#do whatever is required ...
			$ret = $c->perform_FIL(\%mai_data);
			if ($ret ne 'ok') {
				# return to the panel with error message
				$c->stash(error => $c->l($ret));
				$c->stash( 
					title => $title, 
					modul => $modul,
					mai_data  => \%mai_data
				);
				$c->render(template => "emailsettings");	
				return
			} else {
				$c->stash( success => $c->l('mai_FIL_panel_action_was_successful')); #A bit bland - edit it in the lex file
			}
		}
	
		if ($trt eq 'REC'){
			#do whatever is required ...
			$ret = $c->perform_REC(\%mai_data);
			if ($ret ne 'ok') {
				# return to the panel with error message
				$c->stash(error => $c->l($ret));
				$c->stash( 
					title => $title, 
					modul => $modul,
					mai_data  => \%mai_data
				);
				$c->render(template => "emailsettings");	
				return
			} else {
				$c->stash( success => $c->l('mai_REC_panel_action_was_successful')); #A bit bland - edit it in the lex file
			}
		}
	
		if ($trt eq 'DEL'){
			#do whatever is required ...
			$ret = $c->perform_DEL(\%mai_data);
			if ($ret ne 'ok') {
				# return to the panel with error message
				$c->stash(error => $c->l($ret));
				$c->stash( 
					title => $title, 
					modul => $modul,
					mai_data  => \%mai_data
				);
				$c->render(template => "emailsettings");	
				return
			} else {
				$c->stash( success => $c->l('mai_DEL_panel_action_was_successful')); #A bit bland - edit it in the lex file
			}
		}
		
		# and call any signal-events needed
		#TBD
		# Setup shared data and call panel
		if ('none' eq 'none') {
			$mai_data{'trt'} = 'FRONT';
		} else {
			$mai_data{'trt'} = 'none';
		}	
		$c->do_display($mai_data{'trt'});
	} 
}

sub do_display {
#
# Return after link clicked in table (this is a get) - route is "/<whatever>d"
# Expects ?trt=PANEL&selected="TableRowName" plus any other required
#
# OR it maybe a post from the main panel to add a new record 
#
#load up all supplied params into prefix_data hash
#call get-selected-PANEL() - returns hash of all relevent parameters
#load up returned hash into prefix_data
#render - to called panel

    my ($c,$trt) = @_;
    $c->app->log->info($c->log_req);

	#The most common ones - you might want to delete some of these if they are not used.
	 $cdb = esmith::ConfigDB::UTF8->open()   || die("Couldn't open config db");
	 $adb = esmith::AccountsDB->open() || die("Couldn't open Accounts db");
	 $ndb = esmith::NetworksDB->open() || die("Couldn't open Network db");
	 $hdb = esmith::HostsDB::UTF8->open() 	  || die("Couldn't open Hosts db");
	 $ddb = esmith::DomainsDB::UTF8->open()  || die("Couldn't open Domains db");
    
    my $title = $c->l('mai_E-Mail');
    my $modul = '';

	# Accessing all parameters
    my $params = $c->req->params->to_hash;

    # Get number of parameters
    my $num_params = keys %$params;
    
    #Tag as Post or Get (ie. create new entry or edit existing one
    my $is_new_record = ($c->req->method() eq 'POST');
    
    #Params are available in the hash "params" - copy to the prefix_data hash
    #while (my ($key, $value) = each %{$c->req->params->to_hash}) {
    #    $mai_data{$key} = $value;
    #}

    # the value of trt will tell you which panel has returned   
    if (! $trt){ 
		$trt = $c->param('trt') || 'FRONT'; #Indicates where to go now
	}
 
    # Now add in the params from the selected row from the table
		
    my %selectedrow;
    
		if ($trt eq 'FRONT'){
			#Validate Get selected row (if applicable)  FRONT
				%selectedrow = $c->get_selected_FRONT($mai_data{'Selected'},$is_new_record);
		}
	
		if ($trt eq 'ACC'){
			#Validate Get selected row (if applicable)  ACC
				%selectedrow = $c->get_selected_ACC($mai_data{'Selected'},$is_new_record);
		}
	
		if ($trt eq 'FIL'){
			#Validate Get selected row (if applicable)  FIL
				%selectedrow = $c->get_selected_FIL($mai_data{'Selected'},$is_new_record);
		}
	
		if ($trt eq 'REC'){
			#Validate Get selected row (if applicable)  REC
				%selectedrow = $c->get_selected_REC($mai_data{'Selected'},$is_new_record);
		}
	
		if ($trt eq 'DEL'){
			#Validate Get selected row (if applicable)  DEL
				%selectedrow = $c->get_selected_DEL($mai_data{'Selected'},$is_new_record);
		}
	
 
	#Copy in the selected row params to the prefix_data hash to pass to the panel
	while (my ($key, $value) = each %selectedrow){
        $mai_data{$key} = $value;
    }
	# Where to go now
	$mai_data{'trt'} = $trt;
	
	# Set up other shared data according to the panel to go to
    
		if ($trt eq 'FRONT'){
			# pickup any other contents needed and load them into hash shared with panel
			my %returned_hash;
			# subroutine returns a hash directly
			%returned_hash = $c->get_data_for_panel_FRONT();
			# Copy each key-value pair from the returned hash to the prefix data hash
			while (my ($key, $value) = each %returned_hash) {
				$mai_data{$key} = $value;
			}
		}
	
		if ($trt eq 'ACC'){
			# pickup any other contents needed and load them into hash shared with panel
			my %returned_hash;
			# subroutine returns a hash directly
			%returned_hash = $c->get_data_for_panel_ACC();
			# Copy each key-value pair from the returned hash to the prefix data hash
			while (my ($key, $value) = each %returned_hash) {
				$mai_data{$key} = $value;
			}
		}
	
		if ($trt eq 'FIL'){
			# pickup any other contents needed and load them into hash shared with panel
			my %returned_hash;
			# subroutine returns a hash directly
			%returned_hash = $c->get_data_for_panel_FIL();
			# Copy each key-value pair from the returned hash to the prefix data hash
			while (my ($key, $value) = each %returned_hash) {
				$mai_data{$key} = $value;
			}
		}
	
		if ($trt eq 'REC'){
			# pickup any other contents needed and load them into hash shared with panel
			my %returned_hash;
			# subroutine returns a hash directly
			%returned_hash = $c->get_data_for_panel_REC();
			# Copy each key-value pair from the returned hash to the prefix data hash
			while (my ($key, $value) = each %returned_hash) {
				$mai_data{$key} = $value;
			}
		}
	
		if ($trt eq 'DEL'){
			# pickup any other contents needed and load them into hash shared with panel
			my %returned_hash;
			# subroutine returns a hash directly
			%returned_hash = $c->get_data_for_panel_DEL();
			# Copy each key-value pair from the returned hash to the prefix data hash
			while (my ($key, $value) = each %returned_hash) {
				$mai_data{$key} = $value;
			}
		}
	
	
	# and table control fields
     
	
	# Data for panel
	$c->stash( 
		title 			=> $title, 
		modul => $modul,
		mai_data  => \%mai_data
	);
	$c->render(template => "emailsettings");
}    
1;